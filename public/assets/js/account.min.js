class Account
{
    action(type, data) 
    {
        switch(type)
        {
            case 'add':
                return this.__add()

            case 'list':
                return this.__list()

            case 'delete':
                return this.__del({login: data.login}, 'confirm')
                
            default:
                const actions = document.getElementById('actions-'+data.login),
                actionsLoad = document.getElementById('account-action-load')

                actions.innerHTML = actionsLoad.innerHTML
        }

        data.type = type
        data.platform = this.platform

        axios.post(this.path, data)
        .then(res => {
            if(res.data.status === 'success') {
                switch(type)
                {
                    case 'screenshot':
                        document.querySelector('#screenshot [data-ui-dialog-description]').innerHTML = res.data
                        jolty.Dialog.show('screenshot')
                        break;

                    default:
                        toast.success(res.data.message)
                }
            } else {
                toast.warning(res.data.message)
            }

            document.getElementById('actions-'+data.login).innerHTML = document.getElementById('account-actions').innerHTML
        })
        .catch(err => {
            console.error(err); 
        })
    }

    __add()
    {
        const login = document.getElementById('login')
        const platform = document.getElementById('platform')

        this.__post({type: 'add', login: login?.value, platform: platform?.value == 0 ? this.platform : platform?.value}, (res) => {
            if(res.data.status === 'success') {
                document.querySelector('#add-account [data-ui-dismiss]').click()
            } else {
                toast.warning(res.data.message)
            }
        })
    }

    __list() 
    {
        document.getElementById('accounts').innerHTML = document.getElementById('accounts-load').innerHTML

        localStorage.setItem('platform-select', this.platform || 'telegram')

        document.querySelectorAll('#platform-select a').forEach(e => e.classList.remove('bg-gray-100', 'dark:bg-gray-800'))

        const item = document.getElementById('item-'+this.platform)

        document.querySelector('#platform option[value="'+this.platform+'"]').selected = true
        document.querySelectorAll('.platform-title').forEach(e => e.innerText = item?.innerText)

        item.classList.add('bg-gray-100', 'dark:bg-gray-800')

        this.__post({type: 'list', platform: this.platform}, (res) => {
            const accounts = document.getElementById('accounts')

            accounts.innerHTML = ''

            if(res.data == '')
                document.getElementById('accounts').innerHTML = document.getElementById('accounts-notfound').innerHTML
            else
                for(let e in res.data)
                    accounts.insertAdjacentHTML('beforeend', template(e, res.data[e], this.platform))

            jolty.Dropdown.initAll()
            jolty.Dialog.initAll()
        })
    }

    __del()
    {
        if(confirm) {
            return document.getElementById('confirm-delete-account').addEventListener('click', (e) => {
                deleteAccount(data)
            }, {once: true}) 
        }

        this.__post({type: 'delete', login: data.login, platform: this.platform}, (res) => {
            if(res.data.status === 'success') {
                document.getElementById('account-'+data.login).remove()
                document.getElementById('delete-account-button').click()
            } else {
                toast.warning(res.data.message)
            }
        })
    }

    __post(data, callback)
    {
        axios.post(this.path, data)
        .then(res => {
            callback(res)
        })
        .catch(err => {
            console.error(err); 
        })
    }

    __modal(title, content)
    {
        const template = `
            <dialog>
                <button aria-label="Close" data-ui-dismiss></button>
                <div data-ui-dialog-title>${title}</div>
                  <div data-ui-dialog-description>
                    ${content}
                  </div>
            </dialog>
        `;

        return new Promise((resolve) => {
            new jolty.Dialog(template, {
                autodestroy: true
            });
        });
    }
}

const account = new Account()