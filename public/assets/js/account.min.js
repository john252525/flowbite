class Account
{
    action(type, data) 
    {
        switch(type)
        {
            case 'add':
                return this.__add()

            case 'list':
                return this.__list()

            case 'delete':
                return this.__del({login: data.login}, 'confirm')
                
            case 'settings': case 'screenshot':
                var webhooks = document.getElementById('webhooks')

                app.dialog(type+'_dialog')

                if('settings' === type) {
                    webhooks.value = ''
                    document.querySelector('#'+type+'_dialog button').setAttribute('onclick', "account.action('updateSettings', {login: '"+data.login+"'})")
                }
                break;

            case 'updateSettings':
                var webhooks = document.getElementById('webhooks')
                data.webhooks = webhooks.value
                
                this.__status('#settings_dialog [role="status"]')
                break;

            case 'enablePhoneAuth':
                this.__status('#'+type+'-'+data.login+' [role="status"]')
                break;

            case 'getAuthCode':
                app.modal({
                    id: 'getAuthCode_dialog',
                    content: document.getElementById('account-action-load').innerHTML
                })
                break;

            default:
                const actions = document.getElementById('actions-'+data.login),
                actionsLoad = document.getElementById('account-action-load')

                actions.innerHTML = actionsLoad.innerHTML
        }

        data.type = type
        data.platform = this.platform

        axios.post(this.path, data)
        .then(res => {
            if(res.data.status === 'success') {
                switch(type)
                {
                    case 'screenshot':
                        data.type = 'showScreenshot'

                        axios.post(this.path, data, {
                            responseType: 'blob'
                        })
                        .then(res => {
                            const reader = new window.FileReader()
                            reader.readAsDataURL(res.data)
                            reader.onload = function() {
                                const image = reader.result;

                                const dialog = document.querySelector('#screenshot_dialog [data-ui-dialog-description]')

                                dialog.innerHTML = '<img src="'+image+'">'
                            }
                        })
                        .catch(err => console.error(err))

                    case 'settings':
                        let list = '' 

                        for(let e in res.data.webhooks)
                            list += res.data.webhooks[e]+'\n'

                        webhooks.value = list
                        this.__status('#'+type+'_dialog [role="status"]')
                        break;

                    case 'updateSettings':
                        this.__status('#settings_dialog [role="status"]')

                    case 'enablePhoneAuth':
                        this.__status('#'+type+'-'+data.login+' [role="status"]')

                        jolty.Popover.hide(type+'-'+data.login)

                        const phone = document.getElementById('phone_number')
                        phone ? phone.value = '' : ''

                    case 'getAuthCode':
                        app.dialog(type+'_dialog', 'hide')

                        if(res.data.code) {
                            app.modal({
                                title: 'Code',
                                content: '<div class="hidden lg:block px-3 py-1 bg-gray-50 dark:bg-gray-800 dark:border dark:border-gray-700 text-gray-500 dark:text-white text-xl font-bold rounded-md w-auto">'+res.data.code+'</div>'
                            })   
                        }

                    default:
                        toast.success(res.data.message)
                }
            } else {
                switch(type)
                {
                    case 'settings': case 'screenshot': case 'getAuthCode':
                        app.dialog(type+'_dialog', 'hide')

                    case 'updateSettings':
                        this.__status('#settings_dialog [role="status"]')
                        
                    case 'enablePhoneAuth':
                        this.__status('#'+type+'-'+data.login+' [role="status"]')

                    default:
                        toast.warning(res.data.message)
                }
            }

            document.getElementById('actions-'+data.login).innerHTML = document.getElementById('account-actions').innerHTML
        })
        .catch(err => {
            console.error(err); 
        })
    }

    __add()
    {
        const login = document.getElementById('login')
        const platform = document.getElementById('platform')

        this.__post({type: 'add', login: login?.value, platform: platform?.value == 0 ? this.platform : platform?.value}, (res) => {
            if(res.data.status === 'success') {
                document.querySelector('#add-account [data-ui-dismiss]').click()
                this.__list()
            } else {
                toast.warning(res.data.message)
            }
        })
    }

    __list() 
    {
        document.getElementById('accounts').innerHTML = document.getElementById('accounts-load').innerHTML

        localStorage.setItem('platform-select', this.platform || 'telegram')

        document.querySelectorAll('#platform-select a').forEach(e => e.classList.remove('bg-gray-100', 'dark:bg-gray-800'))

        const item = document.getElementById('item-'+this.platform)

        document.querySelector('#platform option[value="'+this.platform+'"]').selected = true
        document.querySelectorAll('.platform-title').forEach(e => e.innerText = item?.innerText)

        item.classList.add('bg-gray-100', 'dark:bg-gray-800')

        this.__post({type: 'list', platform: this.platform}, (res) => {
            const accounts = document.getElementById('accounts')

            accounts.innerHTML = ''

            if(res.data == '')
                document.getElementById('accounts').innerHTML = document.getElementById('accounts-notfound').innerHTML
            else
                for(let e in res.data)
                    accounts.insertAdjacentHTML('beforeend', template(e, res.data[e], this.platform))

            jolty.Dropdown.initAll()
            jolty.Dialog.initAll()
            jolty.Popover.initAll()
        })
    }

    __del(data, confirm)
    {
        if(confirm) {
            return document.getElementById('confirm-delete-account').addEventListener('click', (e) => {
                this.__del(data)
            }, {once: true}) 
        }

        this.__post({type: 'delete', login: data.login, platform: this.platform}, (res) => {
            if(res.data.status === 'success') {
                document.getElementById('account-'+data.login).remove()
                document.querySelector('#delete-account [data-ui-dismiss]').click()
            } else {
                toast.warning(res.data.message)
            }
        })
    }

    __post(data, callback)
    {
        app.post(this.path, data, res => callback(res))
    }

    __status(el)
    {
        document.querySelectorAll(el).forEach(e => e.classList.toggle('hidden'))
    }
}

const account = new Account()